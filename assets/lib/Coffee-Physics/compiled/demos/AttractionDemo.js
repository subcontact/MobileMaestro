// Generated by CoffeeScript 1.6.2
var AttractionDemo, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

AttractionDemo = (function(_super) {
  __extends(AttractionDemo, _super);

  function AttractionDemo() {
    _ref = AttractionDemo.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  AttractionDemo.prototype.setup = function(full) {
    var attraction, bounds, collide, i, max, min, p, repulsion, _i, _results;

    if (full == null) {
      full = true;
    }
    AttractionDemo.__super__.setup.call(this, full);
    this.physics.viscosity = 0.000;
    min = new Vector(0.0, 0.0);
    max = new Vector(this.width, this.height);
    var center = new Vector(this.width/2, this.height/2);
    bounds = new EdgeBounce(min, max);
    this.physics.integrator = new Verlet();
    attraction = new Attraction(center, 3000, 2000);
    repulsion = new Attraction(center, 400, -2000, true);
    window.collidePool = collide = new Collision(true, this.width, this.height);
    max = 1000;
    _results = [];
    var otherParticles = [];
    for (i = _i = 0; 0 <= max ? _i <= max : _i >= max; i = 0 <= max ? ++_i : --_i) {
      var baseMass = Math.pow(Random(0, 10), 10)/Math.pow(10, 10) * 10;
      p = new Particle(baseMass + 1);
      p.setRadius(baseMass * 3 + 3);
      p.moveTo(new Vector(Random(this.width), Random(this.height)));
      p.old.pos = new Vector(p.pos.x + Random(-2, 2), p.pos.y + Random(-2, 2));
      //p.behaviours.push(collide);
      p.behaviours.push(repulsion);
      p.behaviours.push(bounds);
      //collide.pool.push(p);
      _results.push(this.physics.particles.push(p));
      otherParticles.push(p);
    }
    var centerParticle = new Particle(100000);
    centerParticle.fixed = true;
    centerParticle.pos = center;
    centerParticle.setRadius(200);
    centerParticle.behaviours.push(collide);
    this.physics.particles.push(centerParticle);

    var particles = otherParticles;
    var prevColor;
    function test(){
      collide.empty();
      var color = Demo.COLOURS[Math.floor(Random(0, Demo.COLOURS.length - 1))];
      var count = 0;
      if(color !== prevColor){
        particles.forEach(function(p){
          if(p.colour === color){
            collide.add(p);
            count++;
            p.behaviours = [];
            p.behaviours.push(attraction);
            p.behaviours.push(collide);
            p.behaviours.push(bounds);
          }
          if(p.colour === prevColor){
            p.behaviours = [];
            p.behaviours.push(repulsion);
            p.behaviours.push(bounds);
          }
        });
      }
      collide.add(centerParticle);
      console.log(count);
      prevColor = color;

      setTimeout(test, 15000);
    }

    setTimeout(test, 1);
    return _results;
  };

  return AttractionDemo;

})(Demo);
