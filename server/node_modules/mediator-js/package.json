{
  "name": "mediator-js",
  "version": "0.9.5",
  "description": "Flexible event management. Implementation of the mediator pattern.",
  "author": {
    "name": "Jack Lawson",
    "email": "jlawson@olivinelabs.com"
  },
  "main": "index",
  "readmeFilename": "README.md",
  "scripts": {
    "test": "mocha",
    "test_with_coverage": "mocha && MEDIATOR_JS_COV=1 mocha -R html-cov > coverage.html"
  },
  "respository": {
    "type": "git",
    "url": "git://github.com/ajacksified/Mediator.js.git"
  },
  "dependencies": {},
  "devDependencies": {
    "mocha": "1.7.x",
    "chai": "1.4.x",
    "sinon": "1.5.x",
    "sinon-mocha": "0.0.3",
    "sinon-chai": "2.3.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://opensource.org/licenses/mit-license.php"
    }
  ],
  "engines": {
    "node": ">=0.6.0"
  },
  "keywords": [
    "pubsub",
    "events",
    "mediator",
    "publish",
    "subscribe",
    "design patterns"
  ],
  "readme": "Mediator.js\n===========\n[![Build Status](https://travis-ci.org/ajacksified/Mediator.js.png)](https://travis-ci.org/ajacksified/Mediator.js)\n\nVersion 0.9.5\n\n* [View the documentation](http://thejacklawson.com/Mediator.js/)\n* [View the project on Github](https://github.com/ajacksified/Mediator.js)\n* [Relevant blog post](http://thejacklawson.com/2011/06/mediators-for-modularized-asynchronous-programming-in-javascript/)\n* Documentation built using [Paige](https://github.com/rthauby/Paige)\n* [Changelog](#changelog)\n\nA light utility class to help implement the Mediator pattern for easy eventing\n------------------------------------------------------------------------------\n\nMediator is a simple class that allows you to register, unregister, and call\nsubscriber methods to help event-based, asyncronous programming.  Its purpose\nis to make the usage of WebSockets, Ajax calls, DOM events, or any other\nasynchronous operations easy to maintain and test.\n\nMediator has no dependencies on any other libraries.\n\n*1.12kb, minifed and gzipped*\n\nWhy?\n---\nMy specific use case: bind elements easily for WebSocket callbacks. But, you\nmay find usage in it for all kinds of things: as an event management system,\nto decouple calls between javascript functions, Ajax request callbacks, and\nmore. There's an excellent online book that talks about Mediators more in detail\nby [Addy Osmani](http://addyosmani.com/resources/essentialjsdesignpatterns/book/#mediatorpatternjavascript).\n\nUsage\n-----\n\n### Using in Node\n\nThe package is in NPM as `mediator-js`. Include it in your project like so:\n\n```javascript\nvar Mediator = require(\"mediator-js\").Mediator,\n    mediator = new Mediator();\n\nmediator.subscribe(\"wat\", function(){ console.log(arguments); });\nmediator.publish(\"wat\", 7, \"hi\", { one: 1 });\n```\n\n### Using in the Browser\n\nMediator.js is compatible with browser module-loading solutions, including but\nnot limited to Browserify, Almond.js, Require.js, and others.\n\n__Note__: if using AMD / Almond module loading, use the NPM package name:\n`require(\"mediator-js\").Mediator`\n\n```html\n<script src=\"/js/Mediator.min.js\"></script>\n\n<script>\n  var Mediator = require(\"mediator-js\").Mediator,\n      mediator = new Mediator();\n\n  mediator.subscribe(\"wat\", function(){ console.log(arguments); });\n  mediator.publish(\"wat\", 7, \"hi\", { one: 1 });\n</script>\n```\n\n### API\n\nYou can register events with the mediator two ways using channels. You can add\na predicate to perform more complex matching.  Instantiate a new mediator, and\nthen you can being subscribing, removing, and publishing.\n\nTo use it in the browser, include `mediator.min.js` from the root here, or the\nunminified version at `lib/mediator.js.`\n\nSubscription signature:\n    var mediator = new Mediator();\n\n    mediator.subscribe(channel, callback, <options>, <context>);\n    mediator.publish(channel, <data, data, ... >)\n    mediator.remove(channel, <identifier>)\n\nAdditionally, `on` and `bind` are aliased to `subscribe`, and `trigger` and\n`emit` are bound to `publish`. `off` is an alias for `remove`. You can use\n`once` to subscribe to an event that should only be fired once.\n\nSubscriber signature:\n\n    function(<data, data ...>, channel);\n\nThe channel is always returned as the last argument to subscriber functions.\n\nMediator.subscribe options (all are optional; default is empty):\n\n```javascript\n{\n  predicate: function(*args){ ... }\n  priority: 0|1|... \n  calls: 1|2|...\n}\n```\n\nPredicates return a boolean and are run using whatever args are passed in by the\npublishing class. If the boolean is true, the subscriber is run.\n\nPriority marks the order in which a subscriber is called.\n\n`calls` allows you to specify how many times the subscriber is called before it\nis automatically removed. This is decremented each time it is called until it\nreaches 0 and is removed. If it has a predicate and the predicate does not match,\ncalls is not decremented.\n\nA Subscriber object is returned when calling Mediator.subscribe. It allows you\nto update options on a given subscriber, or to reference it by an id for easy\nremoval later.\n\n```javascript\n{\n  id, // guid\n  fn, // function\n  options, // options\n  context, // context for fn to be called within\n  channel, // provides a pointer back to its channel\n  update(options){ ...} // update the subscriber ({ fn, options, context })\n}\n```\n\nExamples:\n\n```javascript\nvar mediator = new Mediator();\n\n// Alert data when the \"message\" channel is published to\n// Subscribe returns a \"Subscriber\" object\nmediator.subscribe(\"message\", function(data){ alert(data); });\nmediator.publish(\"message\", \"Hello, world\");\n\n// Alert the \"message\" property of the object called when the predicate function returns true (The \"From\" property is equal to \"Jack\")\nvar predicate = function(data){ return data.From === \"Jack\" };\nmediator.subscribe(\"channel\", function(data){ alert(data.Message); }, { predicate: predicate });\nmediator.publish(\"channel\", { Message: \"Hey!\", From: \"Jack\" }); //alerts\nmediator.publish(\"channel\", { Message: \"Hey!\", From: \"Audrey\" }); //doesn't alert\n```\n\nYou can remove events by passing in a channel, or a channel and the\nfunction to remove or subscriber id. If you only pass in a channel,\nall subscribers are removed.\n\n```javascript\n// removes all methods bound directly to a channel, but not subchannels\nmediator.remove(\"channel\");\n\n// unregisters *only* MethodFN, a named function, from \"channel\"\nmediator.remove(\"channel\", MethodFN);\n```\n\nYou can call the registered functions with the Publish method, which accepts \nan args array:\n\n```javascript\nmediator.publish(\"channel\", \"argument\", \"another one\", { etc: true });\n```\n\nYou can namespace your subscribing / removing / publishing as such:\n\n```javascript\nmediator.subscribe(\"application:chat:receiveMessage\", function(data){ ... });\n\n// will call parents of the appllication:chat:receiveMessage namespace\n// (that is, next it will call all subscribers of application:chat, and then\n// application). It will not recursively call subchannels - only direct subscribers.\nmediator.publish(\"application:chat:receiveMessage\", \"Jack Lawson\", \"Hey\");\n```\n\nYou can update Subscriber priority:\n\n```javascript\nvar sub = mediator.subscribe(\"application:chat\", function(data){ ... });\nvar sub2 = mediator.subscribe(\"application:chat\", function(data){ ... });\n\n// have sub2 executed first\nmediator.getChannel(\"application:chat\").setPriority(sub2.id, 0);\n```\n\nYou can update Subscriber callback, context, and/or options:\n\n```javascript\nsub.update({ fn: ..., context: { }, options: { ... });\n```\n\nYou can stop the chain of execution by calling channel.stopPropagation():\n\n```javascript\n// for example, let's not post the message if the from and to are the same\nmediator.subscribe(\"application:chat\", function(data, channel){\n  alert(\"Don't send messages to yourself!\");\n  channel.stopPropagation();\n}, options: {\n  predicate: function(data){ return data.From == data.To },\n  priority: 0\n});\n```\n\nChangelog\n---------\n\n__Version 0.9.5__\n* Fixed issue with requring from node\n\n__Version 0.9.4__\n* Fixed issue with auto-removing subscribers after a maximum amount of calls\n\n__Version 0.9.3__\n* Make AMD name match npm package name (`mediator-js`). Used `Mediator.js` \n  previously.\n\n__Version 0.9.1__\n* Fixed AMD / `define` syntax\n* Exposed `Mediator.version`\n\n__Version 0.9.0__\n\n* Reversed order of recursion: now calls parents instead of children channels\n* Lowercase methods\n* Aliases: `on` and `bind` are aliased to `subscribe`, and `trigger` and\n`emit` are bound to `publish`. `off` is an alias for `remove`.\n* Moved tests to mocha from jasmine\n* Supports AMD, requirejs, and browser loading\n* Lots of cleanup around extra variables, and jslinted\n* Published to NPM under \"mediator-js\"\n* Added travis-ci build\n\n__Version 0.6.1__\n\n* Cleaned up some typos\n* Save pointer to channel within subscription\n* Save namespace in channel\n* Fixed bugs in SetPriority\n\n__Version 0.6.0__\n\n* Added ability to stop the chain of calls using c.stopPropagation()\n\n__Version 0.5.0__\n\n* Added ability to access and update subscribing objects\n  * Subscribers now have a unique ID and can be queried by id or by function\n  * Subscriber class can have its function, context, or options updated\n  * Subscriber priority can be updated post-addition\n  * Channels made public by Mediator.GetChannel\n  * Added a little performance test\n\n__Version 0.4.2__\n\n* Added Priority to calls, allowing you to set callback index\n\n__Version 0.4.1__\n\n* Minor internal updates\n\n__Version 0.4.0__\n\n* Predicate no longer acts as a channel and is moved to an options object\nat the end of the subcription call.\n* Signatures changed; context moved to the end of subscriptions\n* Namespacing for subscription binding\n\n\nLicense\n-------\nThis class and its accompanying README and are \n[MIT licensed](http://www.opensource.org/licenses/mit-license.php).\n\nIn Closing\n----------\nHave fun, and please submit suggestions and improvements! You can leave any\nissues here, or contact me at ([@ajacksified](https://twitter.com/ajacksified)).\n",
  "_id": "mediator-js@0.9.5",
  "dist": {
    "shasum": "035e329be8946ec055a459bb0d1e9b637d2c2e2c"
  },
  "_from": "mediator-js@0.9.x",
  "_resolved": "https://registry.npmjs.org/mediator-js/-/mediator-js-0.9.5.tgz"
}
